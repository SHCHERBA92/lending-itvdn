// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$-logo-name: 'Logo';
$-logo-x: 980px;
$-logo-y: 0px;
$-logo-offset-x: -980px;
$-logo-offset-y: 0px;
$-logo-width: 746px;
$-logo-height: 518px;
$-logo-total-width: 1726px;
$-logo-total-height: 1561px;
$-logo-image: '../images/sprite.png';
$-logo: (980px, 0px, -980px, 0px, 746px, 518px, 1726px, 1561px, '../images/sprite.png', 'Logo', );
$-logo2-name: 'Logo2';
$-logo2-x: 1094px;
$-logo2-y: 980px;
$-logo2-offset-x: -1094px;
$-logo2-offset-y: -980px;
$-logo2-width: 500px;
$-logo2-height: 500px;
$-logo2-total-width: 1726px;
$-logo2-total-height: 1561px;
$-logo2-image: '../images/sprite.png';
$-logo2: (1094px, 980px, -1094px, -980px, 500px, 500px, 1726px, 1561px, '../images/sprite.png', 'Logo2', );
$cdek-name: 'cdek';
$cdek-x: 0px;
$cdek-y: 980px;
$cdek-offset-x: 0px;
$cdek-offset-y: -980px;
$cdek-width: 581px;
$cdek-height: 581px;
$cdek-total-width: 1726px;
$cdek-total-height: 1561px;
$cdek-image: '../images/sprite.png';
$cdek: (0px, 980px, 0px, -980px, 581px, 581px, 1726px, 1561px, '../images/sprite.png', 'cdek', );
$instagram-1-name: 'instagram_1';
$instagram-1-x: 581px;
$instagram-1-y: 980px;
$instagram-1-offset-x: -581px;
$instagram-1-offset-y: -980px;
$instagram-1-width: 513px;
$instagram-1-height: 513px;
$instagram-1-total-width: 1726px;
$instagram-1-total-height: 1561px;
$instagram-1-image: '../images/sprite.png';
$instagram-1: (581px, 980px, -581px, -980px, 513px, 513px, 1726px, 1561px, '../images/sprite.png', 'instagram_1', );
$phone-name: 'phone';
$phone-x: 0px;
$phone-y: 0px;
$phone-offset-x: 0px;
$phone-offset-y: 0px;
$phone-width: 980px;
$phone-height: 980px;
$phone-total-width: 1726px;
$phone-total-height: 1561px;
$phone-image: '../images/sprite.png';
$phone: (0px, 0px, 0px, 0px, 980px, 980px, 1726px, 1561px, '../images/sprite.png', 'phone', );
$spritesheet-width: 1726px;
$spritesheet-height: 1561px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($-logo, $-logo2, $cdek, $instagram-1, $phone, );
$spritesheet: (1726px, 1561px, '../images/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
